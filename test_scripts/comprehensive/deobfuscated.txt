$simplevar = "Hello World"
$numbervar = 42
$floatvar = 3.14159
$boolvar = $true
$nullvar = $null
"Simple: Hello World"
"Number: 42"
"Float: 3.14159"
"Boolean: True"
"Null: "
Write-Output "Mixed types: $(3 + "invalid")"

# Test 4: String Operations

$str1 = "Hello"
$str2 = "World"
"Concatenation: Hello World"
"String multiplication: HelloHelloHello"
"String interpolation: Hello, World!"
$x = 10
$y = 20
"Equal: False"
"Not Equal: True"
"Greater Than: False"
"Less Than: True"
"Greater or Equal: False"
"Less or Equal: True"
$true1 = $true
$false1 = $false
"AND: False"
"OR: True"
"NOT: False"
"XOR: True"
$array1 = @(1,2,3,4,5)
$array2 = @("apple","banana","cherry")
$mixedarray = @(1,"two",3,$true,$null)
"Number array: 1 2 3 4 5"
"String array: apple banana cherry"
"Mixed array: 1 two 3 True "
"Array length: 5"
"First element: 1"
$range1 = @(1,2,3,4,5)
$range2 = @(10,9,8,7,6,5,4,3,2,1)
"Ascending range: 1 2 3 4 5"
"Descending range: 10 9 8 7 6 5 4 3 2 1"
$hash = @{
	age = 30
	city = "New York"
	name = "John"
}
"Hash table: System.Collections.Hashtable"
"Name: John"
"Age: 30"
$score = 85
"Grade: B"
$day = "Monday"
switch ($day) {
    "Monday" { Write-Output "Start of work week" }
    "Friday" { Write-Output "TGIF!" }
    "Saturday" { Write-Output "Weekend!" }
    "Sunday" { Write-Output "Weekend!" }
    default { Write-Output "Regular day" }
}
for ($i = 1; $i -le 5; $i++) {
    Write-Output "For loop iteration: $i"
}
$counter = 1
while ($counter -le 3) {
    Write-Output "While loop iteration: $counter"
    $counter++
}
$fruits = @("apple","banana","orange")
foreach ($fruit in $fruits) {
    Write-Output "Fruit: $fruit"
}
function Get-Square($number) {
    return $number * $number
}
function Get-Greeting($name = "World") {
    return "Hello, $name!"
}
"Square of 5: 25"
"Greeting: Hello, World!"
"Greeting with name: Hello, Alice!"
function Test-Parameters {
    param(
        [string]$Name,
        [int]$Age = 25,
        [switch]$Verbose
    )
    
    $result = "Name: $Name, Age: $Age"
    if ($Verbose) {
        $result += " (Verbose mode)"
    }
    return $result
}
"Name: Bob, Age: 30 (Verbose mode)"
$text = "PowerShell is awesome"
"Contains 'Shell': True"
"Starts with 'Power': True"
"Matches regex: True"
$stringnumber = "123"
$intnumber = 123
$floatnumber = 123
"String: 123 (Type: String)"
"String: 123 (Type: String)"
"Int: 123 (Type: Int32)"
"Float: 123 (Type: Double)"
$successful = 2
"Successful operation result: 2"
"Last operation success: True"
$failed = 3 + "invalid string"

Write-Output "Failed operation result: $failed"

"Last operation success after error: False"
$result = 10
"Complex arithmetic: 10"
$complexcondition = $true
"Complex logical: True"
$numbers = @(1,2,3,4,5,6,7,8,9,10)
$evennumbers = @(2,4,6,8,10)
"Even numbers: 2 4 6 8 10"
"PowerShell Version: $PSVersionTable.PSVersion"
"Execution Policy: $(Get-ExecutionPolicy)"
"Current Location: C:\VSExclude\ps-parser"
$nesteddata = @{
	settings = @{
	language = "en-US"
	theme = "Dark"
}
	users = @(@{
	age = 30
	name = "Alice"
	skills = @("PowerShell","Python")
},@{
	age = 25
	name = "Bob"
	skills = @("Java","C#")
})
}
"First user: Alice"
"First user skills: PowerShell, Python"
"First user skills: , "
"Theme setting: Dark"
"Single line comment test"
"Multi-line comment test"
$scriptblock = {param($x, $y) return $x + $y
}
$result = 30
"Script block result: 30"
"Test script execution finished. Check results above for any parsing issues."